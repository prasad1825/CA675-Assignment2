# -*- coding: utf-8 -*-
"""usedCars_visualisation_draft.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FwNsxEymUmZ4ujLeLSON8Gw6rLuMDAQ-
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objects as go
import plotly.express as px
import folium
from folium.plugins import HeatMap
from plotly.offline import init_notebook_mode, iplot
init_notebook_mode(connected=True)

col_names = ['vin', 'model_name' , 'franchise_make', 'make_name' , 'is_new',  'listed_date', 'daysonmarket','year', 'price', 'savings_amount', 'engine_type' ,'body_type' ,'city' , 'city_fuel_economy' , 'highway_fuel_economy' ,  'fuel_type', 'fuel_tank_volume', 'interior_color' , 'listing_color' ,  'maximum_seating' , 'mileage' , 'transmission', 'transmission_display', 'wheel_system_display',  'latitude', 'longitude', 'description']
df =pd.read_csv(r"https://storage.googleapis.com/bucket_usedcars_updated/hive_usedcars_input.csv",names=col_names)



df.head(5)

df.info()
fig, ax = plt.subplots(figsize=(8,6))
ax.set_title('Distribution of the missing values (yellow records)')
sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')

df=df.sort_values(by=['mileage'],ascending=False)
plt.figure(figsize=(25,15))
sns.barplot(x=df.make_name, y=df.mileage)
plt.xticks(rotation= 90)
plt.xlabel('make_name')
plt.ylabel('mileage')
plt.show()

plt.figure(figsize=(24,10))
ax3 = sns.distplot(df.year)
ax3.set(title="Distribution of Year in car listings");

plt.figure(figsize=(24,6))
ax = sns.countplot(x='make_name',data=df,order=df['make_name'].value_counts().index[:30])
locs, labels = plt.xticks();
plt.setp(labels, rotation=45);
ax.set_title("Listing Count per Manufacturer - top 30");

fig, ax = plt.subplots(figsize=(15,10))
ax.set_title('Mean car price of each brand')
df.groupby(['make_name']).mean()['price'].plot.bar(ax=ax)

fig, ax = plt.subplots(figsize=(20,15))
ax.set_title('Scatter plot of the prices in each year, colored by transmission type')
#sns.scatterplot(x='year', y='price', data=df[(df['transmission'] =='manual') | (df['transmission'] =='other')], hue = 'transmission')
sns.scatterplot(x='year', y='price', data=df, hue = 'transmission')



fig, ax = plt.subplots(figsize=(20,15))
ax.set_title('Scatter plot of the prices in each year, colored by drive type')
sns.scatterplot(x='year', y='price', data=df, hue = 'wheel_system_display')

plt.figure(figsize=(3,6))
sns.boxplot(y='price', data=df, showfliers=False)

sns.distplot(df['year'])

plt.figure(figsize=(3,6))
sns.boxplot(y='year', data=df, showfliers=False)

plt.figure(figsize=(3,6))
sns.boxplot(y='mileage', data=df, showfliers=False)

sns.boxplot(y='fuel_type', x='price', data=df, showfliers=False)

sns.boxplot(y='price', x='is_new', data=df, showfliers=False)

print('Top 10 car manufacturing years: ')
print(df['year'].value_counts().iloc[:10])

x = df.make_name
y = df.listing_color

fig = go.Figure(go.Histogram2d(
        x=x,
        y=y
    ))
fig.show()

fig = px.scatter_mapbox(df[df["make_name"]=="Ferrari"], lat="latitude", lon="longitude", hover_name="listing_color", hover_data=["listing_color", "price"],
                        color_discrete_sequence=["fuchsia"], zoom=4, height=600)
fig.update_layout(mapbox_style="open-street-map")
fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
fig.show()



plt.figure(figsize=(10,5))
sns.countplot(df.fuel_type)

plt.figure(figsize=(10,5))
sns.countplot(df.maximum_seating)

plt.figure(figsize=(10,5))
sns.countplot(df.transmission)

plt.figure(figsize=(10,5))
sns.countplot(df.wheel_system_display)



















